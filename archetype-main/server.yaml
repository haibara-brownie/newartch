# 类型定义，发布应用服务时,产品包含的服务指定类型为 service （类型：string）
kind: service
# 服务在平台显示的名称，请与服务目录名称保持一致，建议字符：英文、数字、_ （类型：string）
name: ${service-name}
# 上传后显示的服务版本，建议字符： 数字、字母、_ 、. （类型：string）每次发版时需手动修改
version: ${product-service-version}-${git.commit.id.abbrev}
product:
  # 产品名称 （类型: string)
  name: ${product-name}
  # 产品版本 （类型: string)，每次发版时需手动修改
  version: ${product-service-version}
# 指定该服务安装后是否需要启动 （类型：boolean)
auto_launch: true
# 指定服务是否为基础环境组件，如 jdk, 该类组件以基础环境方式安装 （类型：boolean)
base_env: false
# 定义服务所需端口号，如不启用端口，可留空 （类型：list[map,map...])
ports:
  # 端口描述名称，用户在安装时会以该名称显示表单内容（类型：string)
  - name: 服务端口
    # 端口协议，支持 TCP/UDP
    protocol: TCP
    # 端口英文描述名称，该key会传入到安装脚本中 （类型： string）支持（英文、数字、_)
    key: service_port  # 注：service_port 为保留关键词，表示 为 提供服务的端口
    # 组件的默认端口号，在安装时，会以该值填入表单中（类型： int）
    default: 19500
  - name: metrics端口
    # 端口协议，支持 TCP/UDP
    protocol: TCP
    # 端口英文描述名称，该key会传入到安装脚本中 （类型： string）支持（英文、数字、_)
    key: metrics_port  # metrics_port端口
    # 组件的默认端口号，在安装时，会以该值填入表单中（类型： int）
    default: 19500
  - name: rpc_port端口
    # 端口协议，支持 TCP/UDP
    protocol: TCP
    # 端口英文描述名称，该key会传入到安装脚本中 （类型： string）支持（英文、数字、_)
    key: rpc_port  # metrics_port端口
    # 组件的默认端口号，在安装时，会以该值填入表单中（类型： int）
    default: 19501
  - name: qos_port端口
    # 端口协议，支持 TCP/UDP
    protocol: TCP
    # 端口英文描述名称，该key会传入到安装脚本中 （类型： string）支持（英文、数字、_)
    key: qos_port  # metrics_port端口
    # 组件的默认端口号，在安装时，会以该值填入表单中（类型： int）
    default: 19502

# 服务监控相关配置，定义该服务在安装后如何监控 ，如果不需要监控可留空 （类型： map）
monitor:
  # 监控进程名称，如“service_a”，平台在发现service_a进程不存在后，会发送告警提醒,不需要监控可留空（类型：string）
  process_name:
  # 监控端口号，请根据 ports 中的变量设置，不需要监控可留空 （类型： {string}）
  metric_port: "{metrics_port}"
  # 新增type类型, 前端展示对应类型的grafana面板
  type: "JavaSpringBoot"
# 安装顺序 0、1 默认为0, 例如除了portalWeb外其他的web静态页面均置为 1
level: 0
# 绑定设置，可以为空
affinity:
# 定义该组件安装所需依赖组件名称与版本,如不需其他组件依赖，可留空 （类型： list[map,map..])
dependencies:
  - name: kafka
    version: "3.6.1"
  - name: nacos
    version: "2.2"
  - name: CloudPanguDB
    version: "1.0"
  - name: jdk
    version: "1.8.0"
  - name: comLib
    version: "6"
  - name: redis
    version: "6.2.14"
  - name: xxlJob
    version: "2.4.0"
# 该组件所需最小资源需求 （类型：map)
resources:

# 定义安装组件时所需参数，该参数会传入到 安装脚本中 （类型：list[map,map...]）
install:
  # 传入参数中文描述名称，该名称会在用户安装组件时显示到表单中 （类型： string）
  - name: "安装目录"
    # 传入参数key值，会将该key与值 传入到安装脚本中 （类型：string）
    key: base_dir
    # 上面key默认值 （类型： string）
    default: "{data_path}/app/${service-name}"  # 注： {data_path} 为主机数据目录占位符，请勿使用其他代替
  - name: "日志目录"
    key: log_dir
    default: "{data_path}/logs/${service-name}"
  - name: "数据目录"
    key: data_dir
    default: "{data_path}/appData/${service-name}"
  - name: "启动内存"
    key: memory
    default: "${memory-size}"
  - name: "数据库"
    key: dbname
    default: "cw_${product-name}"
    editable: "false"
  - name: "安装用户"
    key: run_user
    default: "commonuser"
  - name: "kafka_topic名字"
    key: kafka_topic
    default: "cw-logs"
    editable: "false"
control:
  # 启动脚本路径，如没有可留空,脚本名称建议与服务名称一致  （类型：string）
  start: "./bin/${service-name} start"
  # 停止脚本路径，如没有可留空，脚本名称建议与服务名称一致 （类型：string）
  stop: "./bin/${service-name} stop"
  # 重启脚本路径，如没有可留空，脚本名称建议与服务名称一致 （类型：string）
  restart: "./bin/${service-name} restart"
  # 重载脚本路径，如没有可留空 （类型：string）
  reload:
  # 安装脚本路径，必填 （类型：string）
  install: "./scripts/install.py"
  # 初始化脚本路径，如没有可留空  （类型：string）
  init: "./scripts/init.py"
  # 升级脚本路径，使用python脚本，需兼容python2 （类型：string)
  upgrade: "./scripts/upgrade.py"
  # 回滚脚本路径，使用python脚本，需兼容python2 （类型：string)
  rollback: "./scripts/rollback.py"
post_action:
deploy: